/* Copyright(c) Jada Informatique 2021.

Jada Informatique Software License - Version 1.0 - june 27th, 2021

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
#include "utf8Conversion.h"

#include <boost/json.hpp>
#include <nanodbc/nanodbc.h>

#include <chrono>
#include <format>
#include <fstream>
#include <iostream>
#include <set>
#include <variant>

namespace json = boost::json;

// this is the locale used by the console in Qu√©bec!!!
static std::locale loc850(".850");

std::string readJsonFile(const std::string& filename)
{
   std::ifstream input(filename);
   return std::string((std::istreambuf_iterator<char>(input)),
                      std::istreambuf_iterator<char>());
}

/*
specify tables to erase  order is important
specify data to import, order is important and not necessarely same as in erase

   simplification:
      - object member name are same as column name
      - all strings are passed as string in codepage 1252
      -
*/
enum TableIds
{
   TAGS           = 0,
   FIELDS         = 1,
   LOGFILES       = 2,
   MESSAGE        = 3,
   LOGGERMESSAGES = 4
};

std::vector<std::string> g_tables = {
   {"Tags"},
   {"Fields"},
   {"LogFiles"},
   {"Messages"},
   {"LoggerMessages"},
};

std::vector<int> deletionOrder = {
   LOGGERMESSAGES,
   MESSAGE,
   LOGFILES,
   FIELDS,
   TAGS,
};

std::vector<int> creationOrder = {
   TAGS,
   FIELDS,
   LOGFILES,
   MESSAGE,
   LOGGERMESSAGES,
};

std::string Quotify(std::string s)
{
   std::string r;
   for (int i = 0; i < s.size(); i++)
      if (s[i] == '\'')
         r += "''";
      else
         r += s[i];
   return r;
}

std::string ToDb(const json::value& jv)
{
   switch (jv.kind())
   {
      case json::kind::uint64:
         return std::to_string(jv.get_uint64());

      case json::kind::int64:
         return std::to_string(jv.get_int64());

      case json::kind::null:
         return "NULL";

      case json::kind::string:
         return "'" + Quotify(Utf8ToCp1252(jv.get_string().c_str())) + "'";

      case json::kind::double_:
         return std::to_string(jv.get_double());
   }
   throw std::runtime_error("invalid json kind for database");
}


int main(int argc, char** argv)
{
   try
   {
      std::string database {argv[1]};
      auto        connection_string =
         "Driver={Microsoft Access Driver (*.mdb, *.accdb)};Dbq=" + database;
      std::string jsonData = readJsonFile(argv[2]);

      auto jsonDoc = json::parse(jsonData);

      nanodbc::connection conn(connection_string);

      for (auto tblId: deletionOrder)
      {
         std::string eraseCmd = std::format("DELETE FROM {}", g_tables.at(tblId));
         auto        rowIt    = nanodbc::execute(conn, eraseCmd);
         if (rowIt.has_affected_rows())
         {
            std::cout << std::format("deleted row(s): {}", rowIt.affected_rows()) << std::endl;
         }
      }

      auto        version    = jsonDoc.at("version");
      auto        schema     = jsonDoc.at("TlgSchema");
      auto const& jsonTables = schema.get_object();

      std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();

      for (auto tblId: creationOrder)
      {
         auto   tableName = g_tables.at(tblId);
         auto   tableData = jsonTables.at(tableName).as_array();
         size_t rowsDone {0};
         std::cout << std::format("about to insert: {} rows into table {}", tableData.size(), tableName) << std::endl;

         nanodbc::transaction transaction(conn);
         for (const auto& data: tableData)
         {
            const auto& row = data.as_object();
            if (row.empty())
               continue;
            std::string colList;
            std::string values;

            for (auto it = row.begin(); it != row.end(); ++it)
            {
               if (it != row.begin())
               {
                  colList += ", ";
                  values += ", ";
               }

               colList += it->key_c_str();
               values += ToDb(it->value());
            }
            auto sqlCmd = std::format("insert into {} ({}) VALUES({});", tableName, colList, values);
            nanodbc::execute(conn, sqlCmd);
            rowsDone++;
            if (!(rowsDone % 250))
            {
               std::cout << std::format("Insertion row done: {}\r", rowsDone) << std::flush;
            }
         }
         std::cout << std::format("Insertion row done: {}\r", rowsDone) << std::endl;
         std::cout << std::format("About to commit {} row(s)", rowsDone) << std::endl;

         transaction.commit();
      }

      std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();

      std::cout << std::format("Time difference = {} ms ", std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()) << std::endl;
   }
   catch (const std::exception& e)
   {
      std::cerr << e.what() << '\n';
   }

   return 0;
}